"""get created_at/updated_at automatically

Revision ID: 0049efa2957b
Revises: c636e8e2ecc0
Create Date: 2024-04-22 15:05:10.412259

"""

from alembic import op
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = "0049efa2957b"
down_revision = "c636e8e2ecc0"
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column(
        "filter_name",
        "created_at",
        existing_type=postgresql.TIMESTAMP(),
        comment="The date and time in UTC when the record was created",
        existing_comment="Creation time [YYYY-MM-DDThh:mm:ss] (UTC)",
        existing_nullable=True,
    )
    op.alter_column(
        "filter_name",
        "updated_at",
        existing_type=postgresql.TIMESTAMP(),
        comment="The date and time in UTC when the record was last updated",
        existing_comment="Update time [YYYY-MM-DDThh:mm:ss] (UTC)",
        existing_nullable=True,
    )
    op.alter_column(
        "fluxstd",
        "created_at",
        existing_type=postgresql.TIMESTAMP(),
        comment="The date and time in UTC when the record was created",
        existing_nullable=True,
    )
    op.alter_column(
        "fluxstd",
        "updated_at",
        existing_type=postgresql.TIMESTAMP(),
        comment="The date and time in UTC when the record was last updated",
        existing_nullable=True,
    )
    op.alter_column(
        "input_catalog",
        "created_at",
        existing_type=postgresql.TIMESTAMP(),
        comment="The date and time in UTC when the record was created",
        existing_nullable=True,
    )
    op.alter_column(
        "input_catalog",
        "updated_at",
        existing_type=postgresql.TIMESTAMP(),
        comment="The date and time in UTC when the record was last updated",
        existing_nullable=True,
    )
    op.alter_column(
        "proposal",
        "created_at",
        existing_type=postgresql.TIMESTAMP(),
        comment="The date and time in UTC when the record was created",
        existing_comment="Creation time [YYYY-MM-DDThh:mm:ss] (UTC or HST?)",
        existing_nullable=True,
    )
    op.alter_column(
        "proposal",
        "updated_at",
        existing_type=postgresql.TIMESTAMP(),
        comment="The date and time in UTC when the record was last updated",
        existing_comment="Update time [YYYY-MM-DDThh:mm:ss] (UTC or HST?)",
        existing_nullable=True,
    )
    op.alter_column(
        "proposal_category",
        "created_at",
        existing_type=postgresql.TIMESTAMP(),
        comment="The date and time in UTC when the record was created",
        existing_comment="Creation time",
        existing_nullable=True,
    )
    op.alter_column(
        "proposal_category",
        "updated_at",
        existing_type=postgresql.TIMESTAMP(),
        comment="The date and time in UTC when the record was last updated",
        existing_comment="Update time",
        existing_nullable=True,
    )
    op.alter_column(
        "sky",
        "created_at",
        existing_type=postgresql.TIMESTAMP(),
        comment="The date and time in UTC when the record was created",
        existing_nullable=True,
    )
    op.alter_column(
        "sky",
        "updated_at",
        existing_type=postgresql.TIMESTAMP(),
        comment="The date and time in UTC when the record was last updated",
        existing_nullable=True,
    )
    op.alter_column(
        "target",
        "created_at",
        existing_type=postgresql.TIMESTAMP(),
        comment="The date and time in UTC when the record was created",
        existing_nullable=True,
    )
    op.alter_column(
        "target",
        "updated_at",
        existing_type=postgresql.TIMESTAMP(),
        comment="The date and time in UTC when the record was last updated",
        existing_nullable=True,
    )
    op.alter_column(
        "target_type",
        "created_at",
        existing_type=postgresql.TIMESTAMP(),
        comment="The date and time in UTC when the record was created",
        existing_nullable=True,
    )
    op.alter_column(
        "target_type",
        "updated_at",
        existing_type=postgresql.TIMESTAMP(),
        comment="The date and time in UTC when the record was last updated",
        existing_nullable=True,
    )
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column(
        "target_type",
        "updated_at",
        existing_type=postgresql.TIMESTAMP(),
        comment=None,
        existing_comment="The date and time in UTC when the record was last updated",
        existing_nullable=True,
    )
    op.alter_column(
        "target_type",
        "created_at",
        existing_type=postgresql.TIMESTAMP(),
        comment=None,
        existing_comment="The date and time in UTC when the record was created",
        existing_nullable=True,
    )
    op.alter_column(
        "target",
        "updated_at",
        existing_type=postgresql.TIMESTAMP(),
        comment=None,
        existing_comment="The date and time in UTC when the record was last updated",
        existing_nullable=True,
    )
    op.alter_column(
        "target",
        "created_at",
        existing_type=postgresql.TIMESTAMP(),
        comment=None,
        existing_comment="The date and time in UTC when the record was created",
        existing_nullable=True,
    )
    op.alter_column(
        "sky",
        "updated_at",
        existing_type=postgresql.TIMESTAMP(),
        comment=None,
        existing_comment="The date and time in UTC when the record was last updated",
        existing_nullable=True,
    )
    op.alter_column(
        "sky",
        "created_at",
        existing_type=postgresql.TIMESTAMP(),
        comment=None,
        existing_comment="The date and time in UTC when the record was created",
        existing_nullable=True,
    )
    op.alter_column(
        "proposal_category",
        "updated_at",
        existing_type=postgresql.TIMESTAMP(),
        comment="Update time",
        existing_comment="The date and time in UTC when the record was last updated",
        existing_nullable=True,
    )
    op.alter_column(
        "proposal_category",
        "created_at",
        existing_type=postgresql.TIMESTAMP(),
        comment="Creation time",
        existing_comment="The date and time in UTC when the record was created",
        existing_nullable=True,
    )
    op.alter_column(
        "proposal",
        "updated_at",
        existing_type=postgresql.TIMESTAMP(),
        comment="Update time [YYYY-MM-DDThh:mm:ss] (UTC or HST?)",
        existing_comment="The date and time in UTC when the record was last updated",
        existing_nullable=True,
    )
    op.alter_column(
        "proposal",
        "created_at",
        existing_type=postgresql.TIMESTAMP(),
        comment="Creation time [YYYY-MM-DDThh:mm:ss] (UTC or HST?)",
        existing_comment="The date and time in UTC when the record was created",
        existing_nullable=True,
    )
    op.alter_column(
        "input_catalog",
        "updated_at",
        existing_type=postgresql.TIMESTAMP(),
        comment=None,
        existing_comment="The date and time in UTC when the record was last updated",
        existing_nullable=True,
    )
    op.alter_column(
        "input_catalog",
        "created_at",
        existing_type=postgresql.TIMESTAMP(),
        comment=None,
        existing_comment="The date and time in UTC when the record was created",
        existing_nullable=True,
    )
    op.alter_column(
        "fluxstd",
        "updated_at",
        existing_type=postgresql.TIMESTAMP(),
        comment=None,
        existing_comment="The date and time in UTC when the record was last updated",
        existing_nullable=True,
    )
    op.alter_column(
        "fluxstd",
        "created_at",
        existing_type=postgresql.TIMESTAMP(),
        comment=None,
        existing_comment="The date and time in UTC when the record was created",
        existing_nullable=True,
    )
    op.alter_column(
        "filter_name",
        "updated_at",
        existing_type=postgresql.TIMESTAMP(),
        comment="Update time [YYYY-MM-DDThh:mm:ss] (UTC)",
        existing_comment="The date and time in UTC when the record was last updated",
        existing_nullable=True,
    )
    op.alter_column(
        "filter_name",
        "created_at",
        existing_type=postgresql.TIMESTAMP(),
        comment="Creation time [YYYY-MM-DDThh:mm:ss] (UTC)",
        existing_comment="The date and time in UTC when the record was created",
        existing_nullable=True,
    )
    # ### end Alembic commands ###
